#####################################################################################
#
# Play Authenticate defaults
#
#####################################################################################

play-authenticate {
	
	# The user will get redirected here if no original URL was saved before
	# starting the auth process and your resolver returns null for afterAuth()
	afterAuthFallback="/"
	
	afterLogoutFallback="/"
	
	# If set to true, account merging is enabled, if set to false its disabled and accounts will never prompted to be merged
	# defaults to true
	accountMergeEnabled=true
	
	# if this is set to true, accounts are automatically merged
	# (e.g. if a user is logged in and uses an authentication provider
	# which has already been registered to another user prior to logging out, those two users are merged
	# Handle setting this to true this with care
	# if set to false, your resolver must not return null for askMerge()
	# defaults to false
	accountAutoMerge=false
	
	# if this is set to true, accounts are automatically linked
	# (e.g. if a user is logged in and uses a different authentication provider
	# which has NOT yet been registered to another user, this newly used authentication
	# provider gets added to the current local user
	# Handle setting this to true with care
	# If set to false, your resolver must not return null for askLink()
	# defaults to false
	accountAutoLink=false

    password {
        mail {
            from {
            	# Mailing from address
            	email="you@gmail.com"

	            # Mailing name
	            name=Play Authenticate
	        }
            
            # Pause between email jobs (in seconds)
            delay=1
        }
    }
    
    # The Twitter settings
    twitter {
        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        
        requestTokenUrl="https://api.twitter.com/oauth/request_token"
		accessTokenUrl="https://api.twitter.com/oauth/access_token"
		authorizationUrl="https://api.twitter.com/oauth/authenticate"
		userInfoUrl="https://api.twitter.com/1/account/verify_credentials.json"
		
        
        # Get the credentials here: https://dev.twitter.com/docs/auth/oauth
        # Remove leading '#' after entering:
        # consumerKey=
        # consumerSecret=
        
       
    
    }
    # The Linkedin settings
    linkedin {
        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        
        requestTokenUrl="https://api.linkedin.com/uas/oauth/requestToken?scope=r_fullprofile+r_emailaddress"
        accessTokenUrl="https://api.linkedin.com/uas/oauth/accessToken"
        authorizationUrl="https://api.linkedin.com/uas/oauth/authenticate"
        userInfoUrl="http://api.linkedin.com/v1/people/~:(id,picture-url,first-name,last-name,industry,positions,educations)?format=json"
        userEmailUrl="http://api.linkedin.com/v1/people/~/email-address?format=json"

        # Get the credentials here: http://developer.linkedin.com/
        # Remove leading '#' after entering:
        # consumerKey=
        # consumerSecret=
        
       
    
    }

    # The Foursquare settings
    foursquare {
        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://foursquare.com/oauth2/authorize"
        accessTokenUrl="https://foursquare.com/oauth2/access_token"
        userInfoUrl="https://api.foursquare.com/v2/users/self"
        
        # Get the credentials here: https://de.foursquare.com/oauth/
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    
    }

	# The Facebook settings
    facebook {
        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false
            
            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://graph.facebook.com/oauth/authorize"
        accessTokenUrl="https://graph.facebook.com/oauth/access_token"
        userInfoUrl="https://graph.facebook.com/me"

        # Comma-separated list of fields to retrieve from this Facebook user.
        # See possible values here: https://developers.facebook.com/docs/reference/api/user/
        # Note that some fields may require additional permissions on your Facebook App.
        userInfoFields="id,name,first_name,middle_name,last_name,username,link,gender,email,timezone,locale,updated_time"

        scope=email
        
        # Get the credentials here: https://developers.facebook.com/apps
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

	# The Google settings
    google {
        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false
            
            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://accounts.google.com/o/oauth2/auth"
        accessTokenUrl="https://accounts.google.com/o/oauth2/token"
        userInfoUrl="https://www.googleapis.com/oauth2/v1/userinfo"
        scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"
        
        # Get the credentials here: https://code.google.com/apis/console
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

    # The OpenID settings
    openid {
        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false
            
            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        attributes {
            required {
                email="http://schema.openid.net/contact/email"
            }

            optional {
                country="http://axschema.org/contact/country/home"
                firstname="http://axschema.org/namePerson/first"
                language="http://axschema.org/pref/language"
                lastname="http://axschema.org/namePerson/last"
            }
        }
    }
}
