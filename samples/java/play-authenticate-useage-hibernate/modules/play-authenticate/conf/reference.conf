#####################################################################################
#
# Play Authenticate defaults
#
#####################################################################################

play-authenticate {

	# The user will get redirected here if no original URL was saved before
	# starting the auth process and your resolver returns null for afterAuth()
	afterAuthFallback="/"

	afterLogoutFallback="/"

	# If set to true, account merging is enabled, if set to false its disabled and accounts will never prompted to be merged
	# defaults to true
	accountMergeEnabled=true

	# if this is set to true, accounts are automatically merged
	# (e.g. if a user is logged in and uses an authentication provider
	# which has already been registered to another user prior to logging out, those two users are merged
	# Handle setting this to true this with care
	# if set to false, your resolver must not return null for askMerge()
	# defaults to false
	accountAutoMerge=false

	# if this is set to true, accounts are automatically linked
	# (e.g. if a user is logged in and uses a different authentication provider
	# which has NOT yet been registered to another user, this newly used authentication
	# provider gets added to the current local user
	# Handle setting this to true with care
	# If set to false, your resolver must not return null for askLink()
	# defaults to false
	accountAutoLink=false

    password {
        mail {
            from {
            	# Mailing from address
            	email="you@gmail.com"

	            # Mailing name
	            name=Play Authenticate
	        }

            # Pause between email jobs (in seconds)
            delay=1
        }
    }

    # The Twitter settings
    twitter {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        requestTokenUrl="https://api.twitter.com/oauth/request_token"
		accessTokenUrl="https://api.twitter.com/oauth/access_token"
		authorizationUrl="https://api.twitter.com/oauth/authenticate"
		userInfoUrl="https://api.twitter.com/1.1/account/verify_credentials.json"


        # Get the credentials here: https://dev.twitter.com/docs/auth/oauth
        # Remove leading '#' after entering:
        # consumerKey=
        # consumerSecret=



    }
    # The Linkedin settings
    linkedin {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        requestTokenUrl="https://api.linkedin.com/uas/oauth/requestToken?scope=r_fullprofile+r_emailaddress"
        accessTokenUrl="https://api.linkedin.com/uas/oauth/accessToken"
        authorizationUrl="https://api.linkedin.com/uas/oauth/authenticate"
        userInfoUrl="http://api.linkedin.com/v1/people/~:(id,picture-url,first-name,last-name,industry,positions,educations,public-profile-url)?format=json"
        userEmailUrl="http://api.linkedin.com/v1/people/~/email-address?format=json"

        # Get the credentials here: http://developer.linkedin.com/
        # Remove leading '#' after entering:
        # consumerKey=
        # consumerSecret=



    }

    # The Foursquare settings
    foursquare {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://foursquare.com/oauth2/authorize"
        accessTokenUrl="https://foursquare.com/oauth2/access_token"
        userInfoUrl="https://api.foursquare.com/v2/users/self"

        # Get the credentials here: https://de.foursquare.com/oauth/
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=

    }

	# The Facebook settings
    facebook {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://www.facebook.com/v2.1/dialog/oauth"
        accessTokenUrl="https://graph.facebook.com/oauth/access_token"
        userInfoUrl="https://graph.facebook.com/v2.1/me"

        # Comma-separated list of fields to retrieve from this Facebook user.
        # See possible values here: https://developers.facebook.com/docs/reference/api/user/
        # Note that some fields may require additional permissions on your Facebook App.
        userInfoFields="id,name,first_name,middle_name,last_name,link,gender,email,timezone,locale,updated_time"

        scope=email

        # Additional parameter - Read more about it here: https://developers.facebook.com/docs/reference/dialogs/oauth
        # display="popup"

        # Get the credentials here: https://developers.facebook.com/apps
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

	# The Google settings
    google {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://accounts.google.com/o/oauth2/auth"
        accessTokenUrl="https://accounts.google.com/o/oauth2/token"
        userInfoUrl="https://www.googleapis.com/oauth2/v1/userinfo"
        scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"

        # Additional parameters - Read more about them here: https://developers.google.com/accounts/docs/OAuth2WebServer#offline
        # accessType="offline"
        # approvalPrompt="force"

        # Get the credentials here: https://code.google.com/apis/console
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

    # The OpenID settings
    openid {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        attributes {
            required {
                email="http://schema.openid.net/contact/email"
            }

            optional {
                country="http://axschema.org/contact/country/home"
                firstname="http://axschema.org/namePerson/first"
                language="http://axschema.org/pref/language"
                lastname="http://axschema.org/namePerson/last"
            }
        }
    }

    # The Vk settings
    vk {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }
        authorizationUrl="https://oauth.vk.com/authorize"
        accessTokenUrl="https://oauth.vk.com/access_token"
        userInfoUrl="https://api.vk.com/method/users.get"

        # Comma-separated list of fields to retrieve from this Vk user.
        # See possible values here: http://vk.com/dev/users.get
        userInfoFields="nickname,screen_name,sex,photo_200_orig,timezone"

        # Get the credentials here: http://vk.com/editapp?act=create
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

    # The XING settings
    xing {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        requestTokenUrl="https://api.xing.com/v1/request_token"
        accessTokenUrl="https://api.xing.com/v1/access_token"
        authorizationUrl="https://api.xing.com/v1/authorize"
        userInfoUrl="https://api.xing.com/v1/users/me?fields=id,first_name,last_name,display_name,active_email,photo_urls,permalink,gender"

        # XING credentials
        # Get them here: https://dev.xing.com/
        # Remove leading '#' after entering:
        # consumerKey=
        # consumerSecret=
    }

    # The Untappd settings
    untappd {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # Take the code paramater and then pass it back to the following address via GET (pass parameters via
            # the Query String):
            # host=yourdomain.com
        }

        accessTokenUrl="https://untappd.com/oauth/authorize"
        authorizationUrl="https://untappd.com/oauth/authenticate"
        userInfoUrl="http://api.untappd.com/v4/user/info"


        # Untappd credentials
        # Get them here: https://untappd.com/api/
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }

	# The Pocket settings
    pocket {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=true

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        requestTokenUrl="https://getpocket.com/v3/oauth/request"
        accessTokenUrl="https://getpocket.com/v3/oauth/authorize"
        authorizationUrl="https://getpocket.com/auth/authorize"

        # Pocket credentials
        # Get them here: http://getpocket.com/developer/apps/new
        # Remove leading '#' after entering:
        # consumerKey=
    }

	# The Github settings
    github {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=true

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # host=yourdomain.com
        }

        accessTokenUrl="https://github.com/login/oauth/access_token"
        authorizationUrl="https://github.com/login/oauth/authorize"
        userInfoUrl="https://api.github.com/user"

        # Github credentials
        # Get them here: https://github.com/settings/applications/new
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }


    # The eventbrite settings
    eventbrite {
        # Timeout in ms
        timeout = 10000

        redirectUri {
            # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
            secure=false

            # You can use this setting to override the automatic detection
            # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
            # Take the code paramater and then pass it back to the following address via GET (pass parameters via
            # the Query String):
            # host=yourdomain.com
        }

        authorizationUrl="https://www.eventbrite.com/oauth/authorize"
        accessTokenUrl="https://www.eventbrite.com/oauth/token"
        userInfoUrl="https://www.eventbriteapi.com/v3/users/me"

        # eventbrite credentials
        # Get them here: http://developer.eventbrite.com/
        # Redirect URL should be something like: http://yourdomain.com/authenticate/eventbrite
        # Remove leading '#' after entering:
        # clientId=
        # clientSecret=
    }
}
